CREATE SCHEMA IF NOT EXISTS gram;
CREATE SCHEMA IF NOT EXISTS tools;
CREATE TABLE IF NOT EXISTS gram.section (sectionid integer NOT NULL, name character varying(250) NOT NULL, uuid UUID DEFAULT gen_random_uuid(), CONSTRAINT section_pk PRIMARY KEY (sectionid));
CREATE SEQUENCE IF NOT EXISTS gram.section_sectionid_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1 OWNED BY gram.section.sectionid;
CREATE TABLE IF NOT EXISTS gram.article (articleid integer NOT NULL,articletitle character varying(250) NOT NULL,etag character varying(250) NOT NULL,modified timestamp with time zone NOT NULL,posted timestamp with time zone NOT NULL,postedhtml character varying NOT NULL,postedmarkdown character varying NOT NULL,postedname character varying(250) NOT NULL,sectionid integer,comments boolean,description character varying(1000),imageurl character varying(1000),summary character varying(65000),url character varying(1000),suggestion character varying(250),uuid UUID DEFAULT gen_random_uuid(), CONSTRAINT article_pk PRIMARY KEY (articleid),CONSTRAINT article_fk FOREIGN KEY (sectionid) REFERENCES gram.section(sectionid) ON UPDATE RESTRICT ON DELETE RESTRICT);
ALTER TABLE gram.article ADD COLUMN IF NOT EXISTS searchabletext character varying GENERATED ALWAYS AS (regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(postedmarkdown, '\*\*(.+?)\*\*', ' \1 ', 'gm'), '__(.+?)__', ' \1 ', 'gm'), '_(.+?)_', ' \1 ', 'gm'), '\*(.+?)\*', ' \1 ', 'gm'), '~~(.+?)~~', ' \1 ', 'gm'), '`(.+?)`', ' \1 ', 'gm'), '```[\s\S]*?```', ' \1 ', 'gm'), '!?\[(.+?)\]\((.+?)( "(.+?)")?\)', ' \1 \4 ', 'gm'), '^#+\s+(.+?)\s*$', ' \1 ', 'gmx'), '^\s*>\s+(.+?)\s*$', ' \1 ', 'gmx'), '^\s*[\*\+-]\s+(.+?)\s*$', ' \1 ', 'gmx'), '^\s*\d+\.\s+(.+?)\s*$', ' \1 ', 'gmx'), '^\s*[-*_]{3,}\s*$', ' \1 ', 'gmx')) STORED;
CREATE SEQUENCE IF NOT EXISTS gram.article_articleid_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1 OWNED BY gram.article.articleid;
CREATE TABLE IF NOT EXISTS gram.comment (commentid integer NOT NULL,articleid integer NOT NULL,posted timestamp with time zone NOT NULL,postedhtml character varying NOT NULL,postedname character varying(250) NOT NULL,isapproved boolean, isspam boolean,postedmarkdown character varying,uuid UUID DEFAULT gen_random_uuid(), CONSTRAINT comment_pk PRIMARY KEY (commentid),CONSTRAINT comment_fk FOREIGN KEY (articleid) REFERENCES gram.article(articleid) ON UPDATE RESTRICT ON DELETE RESTRICT);
CREATE SEQUENCE IF NOT EXISTS gram.comment_commentid_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1 OWNED BY gram.comment.commentid;
CREATE TABLE IF NOT EXISTS tools.exceptionevent (exceptioneventid integer NOT NULL,atime timestamp with time zone NOT NULL,description character varying NOT NULL,title character varying(65000) NOT NULL,pagerequestid integer,uuid UUID DEFAULT gen_random_uuid(), CONSTRAINT exceptionevent_pk PRIMARY KEY (exceptioneventid));
CREATE SEQUENCE IF NOT EXISTS tools.exceptionevent_exceptioneventid_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1 OWNED BY tools.exceptionevent.exceptioneventid;
CREATE TABLE IF NOT EXISTS tools.fileupload (filename character varying(1000) NOT NULL,atime timestamp with time zone NOT NULL,etag character(250) NOT NULL,uuid UUID DEFAULT gen_random_uuid(), filedata bytea NOT NULL,datasize integer GENERATED ALWAYS AS (length(filedata)) STORED,brdata bytea,brsize integer GENERATED ALWAYS AS (length(brdata)) STORED,gzipdata bytea,gzipsize integer GENERATED ALWAYS AS (length(gzipdata)) STORED,zstddata bytea,zstdsize integer GENERATED ALWAYS AS (length(zstddata)) STORED,mimetype character varying(100) NOT NULL,url character varying(65000),CONSTRAINT fileupload_pk PRIMARY KEY (filename));
CREATE TABLE IF NOT EXISTS tools.honeypot (honeypotid integer NOT NULL,uuid UUID DEFAULT gen_random_uuid(), expiresatatime timestamp with time zone NOT NULL,ip character varying(100) NOT NULL,startedatatime timestamp with time zone NOT NULL,CONSTRAINT honeypot_pk PRIMARY KEY (honeypotid));
CREATE SEQUENCE IF NOT EXISTS tools.honeypot_honeypotid_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1 OWNED BY tools.honeypot.honeypotid;
CREATE TABLE IF NOT EXISTS tools.localization (key character varying(1000) NOT NULL,localecode character varying(100) NOT NULL,value character varying(65000) NOT NULL,uuid UUID DEFAULT gen_random_uuid(), CONSTRAINT localization_pk PRIMARY KEY (key, localecode))
ALTER TABLE ONLY gram.article ALTER COLUMN articleid SET DEFAULT nextval('gram.article_articleid_seq'::regclass);
ALTER TABLE ONLY gram.comment ALTER COLUMN commentid SET DEFAULT nextval('gram.comment_commentid_seq'::regclass);
ALTER TABLE ONLY gram.section ALTER COLUMN sectionid SET DEFAULT nextval('gram.section_sectionid_seq'::regclass);
ALTER TABLE ONLY tools.exceptionevent ALTER COLUMN exceptioneventid SET DEFAULT nextval('tools.exceptionevent_exceptioneventid_seq'::regclass);
ALTER TABLE ONLY tools.honeypot ALTER COLUMN honeypotid SET DEFAULT nextval('tools.honeypot_honeypotid_seq'::regclass);
CREATE INDEX IF NOT EXISTS article_posted ON gram.article USING btree (posted);
CREATE INDEX IF NOT EXISTS article_postedtime_sectionid ON gram.article USING btree (sectionid, posted);
CREATE INDEX IF NOT EXISTS article_sectionid ON gram.article USING btree (sectionid);
CREATE INDEX IF NOT EXISTS comment_articleid ON gram.comment USING btree (articleid);
CREATE INDEX IF NOT EXISTS comment_articleid_postedtime ON gram.comment USING btree (articleid, posted);
CREATE INDEX IF NOT EXISTS comment_postedtime ON gram.comment USING btree (posted);
CREATE INDEX IF NOT EXISTS honeypot_expiredtime_ip ON tools.honeypot USING btree (ip, expiresatatime);
CREATE INDEX IF NOT EXISTS honeypot_expiretime ON tools.honeypot USING btree (expiresatatime);
CREATE INDEX IF NOT EXISTS honeypot_ip ON tools.honeypot USING btree (ip);
CREATE MATERIALIZED VIEW IF NOT EXISTS gram.articlesearchindex AS (SELECT articleid, ((setweight(to_tsvector('english',(COALESCE(article.articletitle, ''::character varying))::text), 'A'::"char") || setweight(to_tsvector('english',COALESCE(searchabletext, ''::text)), 'D'::"char")) || setweight(to_tsvector('english',(COALESCE(article.description, ''::character varying))::text), 'D'::"char")) searchindexdata from gram.article ORDER BY articleid) WITH NO DATA;
CREATE MATERIALIZED VIEW IF NOT EXISTS gram.articlewords AS SELECT ts_stat.word FROM ts_stat('SELECT to_tsvector(''simple'', searchabletext) FROM gram.article'::text) ORDER BY ts_stat.word WITH NO DATA;
CREATE INDEX IF NOT EXISTS articlewords_gin_index ON gram.articlewords USING gin (word public.gin_trgm_ops);
CREATE INDEX IF NOT EXISTS articlewords_word ON gram.articlewords USING btree (word);